// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/30/2024 20:33:05"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          uController
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module uController_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK1;
reg FC;
reg FZ;
reg [5:0] I;
reg RST1;
reg RST2;
reg S0;
reg SWA;
reg SWB;
// wires                                               
wire ALU_B;
wire LDAR;
wire LDDR1;
wire LDDR2;
wire LDIR;
wire LDPC;
wire LDR1;
wire LED_B;
wire LOAD;
wire [23:0] M;
wire [3:0] P;
wire PC_B;
wire R0_B;
wire R1_B;
wire R2_B;
wire RAM_B;
wire SW_B;
wire [5:0] uaddr;

// assign statements (if any)                          
uController i1 (
// port map - connection between master ports and signals/registers   
	.ALU_B(ALU_B),
	.CLK1(CLK1),
	.FC(FC),
	.FZ(FZ),
	.I(I),
	.LDAR(LDAR),
	.LDDR1(LDDR1),
	.LDDR2(LDDR2),
	.LDIR(LDIR),
	.LDPC(LDPC),
	.LDR1(LDR1),
	.LED_B(LED_B),
	.LOAD(LOAD),
	.M(M),
	.P(P),
	.PC_B(PC_B),
	.R0_B(R0_B),
	.R1_B(R1_B),
	.R2_B(R2_B),
	.RAM_B(RAM_B),
	.RST1(RST1),
	.RST2(RST2),
	.S0(S0),
	.SW_B(SW_B),
	.SWA(SWA),
	.SWB(SWB),
	.uaddr(uaddr)
);
initial 
begin 
#2000000 $finish;
end 

// S0
initial
begin
	S0 = 1'b1;
end 

// CLK1
always
begin
	CLK1 = 1'b0;
	CLK1 = #5000 1'b1;
	#5000;
end 

// FC
initial
begin
	FC = 1'b0;
end 
// I[ 5 ]
initial
begin
	I[5] = 1'b0;
end 
// I[ 4 ]
initial
begin
	I[4] = 1'b0;
	I[4] = #1800000 1'b1;
end 
// I[ 3 ]
initial
begin
	I[3] = 1'b0;
	I[3] = #1420000 1'b1;
	I[3] = #380000 1'b0;
end 
// I[ 2 ]
initial
begin
	I[2] = 1'b0;
	I[2] = #1260000 1'b1;
	I[2] = #160000 1'b0;
	I[2] = #200000 1'b1;
	I[2] = #180000 1'b0;
end 
// I[ 1 ]
initial
begin
	I[1] = 1'b0;
end 
// I[ 0 ]
initial
begin
	I[0] = 1'b0;
end 

// FZ
initial
begin
	FZ = 1'b0;
end 

// RST1
initial
begin
	RST1 = 1'b0;
	RST1 = #100000 1'b1;
	RST1 = #300000 1'b0;
	RST1 = #120000 1'b1;
	RST1 = #540000 1'b0;
	RST1 = #80000 1'b1;
end 

// RST2
initial
begin
	RST2 = 1'b1;
	RST2 = #60000 1'b0;
	RST2 = #340000 1'b1;
	RST2 = #40000 1'b0;
	RST2 = #620000 1'b1;
	RST2 = #60000 1'b0;
end 

// SWA
initial
begin
	SWA = 1'b0;
	SWA = #100000 1'b1;
	SWA = #420000 1'b0;
	SWA = #460000 1'b1;
end 

// SWB
initial
begin
	SWB = 1'b0;
	SWB = #980000 1'b1;
end 
endmodule

